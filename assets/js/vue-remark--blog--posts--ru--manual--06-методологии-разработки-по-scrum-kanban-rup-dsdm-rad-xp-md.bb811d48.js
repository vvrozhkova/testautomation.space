(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{UQSp:function(t,n,i){"use strict";n.a={name:"VueRemarkRoot",render(t){return t("div",null,this.$slots.default)}}},scNl:function(t,n,i){"use strict";i.r(n);var a=i("KHd+"),e=i("UQSp"),o=i("oCYn");function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}o.a.config.optionMergeStrategies;var s={VueRemarkRoot:e.a},D=function(t){var n=t.options.components=t.options.components||{},i=t.options.computed=t.options.computed||{};Object.keys(s).forEach((function(t){"object"===r(s[t])&&"function"==typeof s[t].render||"function"==typeof s[t]&&"function"==typeof s[t].options.render?n[t]=s[t]:i[t]=function(){return s[t]}}))},l=o.a.config.optionMergeStrategies,c="__vueRemarkFrontMatter",p={excerpt:null,title:"Методологии разработки ПО (Scrum, Kanban, RUP, DSDM, MSF, XP)",category:"manual",description:"Методологии разработки ПО (Scrum, Kanban, RUP, DSDM, MSF, XP)",tags:["Методологии разработки ПО","Scrum","Kanban","RUP","DSDM","MSF","XP"],icon:"fas fa-bug",image:"null",date:"2022-05-20T00:00:00.000Z",keywords:"qa, Методологии разработки ПО, Scrum, Kanban, RUP, DSDM, MSF, XP",order:6,links:[{items:[{title:"1. Тестирование, Quality control, Quality assurance",link:"/testirovanie-quality-control-quality-assurance/"},{title:"2. Понятие качества, международные стандарты качества",link:"/ponyatie-kachestva-mezhdunarodnye-standarty-kachestva/"},{title:"3. Жизненный цикл дефекта",link:"/zhiznennyj-czikl-defekta/"},{title:"4. Жизненный цикл разработки ПО, SDLC (Software Development LifeCycle)",link:"/zhiznennyj-czikl-razrabotki-po-sdlc-software-development-life-cycle/"},{title:"5. Модели разработки ПО",link:"/modeli-razrabotki-po/"},{title:"6. Методологии разработки ПО (Scrum, Kanban, RUP, DSDM, MSF, XP)",link:"/metodologii-razrabotki-po-scrum-kanban-rup-dsdm-msf-xp"},{title:"7. Жизненный цикл тестирования приложений, STLC (Software Testing LifeCycle)",link:"/zhiznennyj-czikl-testirovaniya-prilozhenij-stlc-software-testing-life-cycle/"},{title:"8. Принципы тестирования, Agile принципы тестирования",link:"/princzipy-testirovaniya-agile-princzipy-testirovaniya/"},{title:"9. Практики и подходы тестирования",link:"/praktiki-i-podhody-testirovaniya/"},{title:"10. Виды тестирования",link:"/vidy-testirovaniya/"},{title:"11. Уровни тестирования",link:"/urovni-testirovaniya/"},{title:"12. Техники тест-дизайна",link:"/tehniki-test-dizajna/"},{title:"13. Тестовая документация",link:"/testovaya-dokumentacziya/"}]}]};var B=function(t){t.options[c]&&(t.options[c]=p),o.a.util.defineReactive(t.options,c,p),t.options.computed=l.computed({$frontmatter:function(){return t.options[c]}},t.options.computed)},v=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("VueRemarkRoot",[n("p",[t._v("Методологии разработки — это применение той или иной модели на практике.")]),n("h2",{attrs:{id:"scrum"}},[n("a",{attrs:{href:"#scrum","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("SCRUM")]),n("p",[n("strong",[t._v("Scrum")]),n("sup",{attrs:{id:"fnref-1"}},[n("a",{staticClass:"footnote-ref",attrs:{href:"#fn-1"}},[t._v("1")])]),t._v(" — это методология управления проектами, которая построена на принципах тайм-менеджмета. Основной ее особенностью является вовлеченность в процесс всех участников, причем у каждого участника есть своя определенная роль. ")]),n("p",[t._v("Суть в том, что не только команда работает над решением задачи, но все те, кому интересно решение задачи, не просто поставили ее и расслабились, а постоянно «работают» с командой, и эта работа не означает только постоянный контроль.")]),n("p",[n("img",{attrs:{src:"https://leonardo.osnova.io/973a45ec-4e04-eb43-ecb1-03f639188c87/-/preview/2100/-/format/webp/",alt:"SCRUM методология"}})]),n("h3",{attrs:{id:"основные-термины-которые-используются-в-методологии"}},[n("a",{attrs:{href:"#%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D1%8B-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B5-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8E%D1%82%D1%81%D1%8F-%D0%B2-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D0%B8","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Основные термины, которые используются в методологии")]),n("p",[n("strong",[t._v("Владелец продукта (Product owner)")]),t._v(" — человек, который имеет непосредственный интерес в качественном конечном продукте, он понимает, как это продукт должен выглядеть/работать. Этот человек не работает в команде, он работает на стороне заказчика/клиента (это может быть как другая компания, так и другой отдел), но этот человек работает с командой. И это тот человек, который расставляет приоритеты для задач.")]),n("p",[n("strong",[t._v("Scrum-мастер")]),t._v(" — это человек, которого можно назвать руководителем проекта, хотя это не совсем так. Главное, что это человек, «зараженный Scrum-бациллой» на столько, что несет ее как своей команде, так и заказчику, и соответственно следит за тем, чтобы все принципы Scrum соблюдались.\nScrum-команда — это команда, которая принимает все принципы Scrum и готова с ними работать.")]),n("p",[n("strong",[t._v("Спринт")]),t._v(" — отрезок времени, который берется для выполнения определенного (ограниченного) списка задач. Рекомендуется брать 2-4 недели (длительность определяется командой один раз).")]),n("p",[n("strong",[t._v("Бэклог (backlog)")]),t._v(" — это список всех работ. Можно сказать, что это ежедневник общего пользования.")]),n("p",[t._v("Различают 2 вида бэклогов: Product-бэклог и спринт-бэклог."),n("br"),n("strong",[t._v("Product-бэклог")]),t._v(" — это полный список всех работ, при реализации которых мы получим конечный продукт."),n("br"),n("strong",[t._v("Спринт-бэклог")]),t._v(" — это список работ, который определила команда и согласовала с Владельцем продукта, на ближайший отчетный период (спринт). Задания в спринт-бэклог берутся из product-бэклога.")]),n("p",[n("strong",[t._v("Планирование спринта")]),t._v(" — это совещание, на котором присутствуют все (команда, Scrum-мастер, Владелец продукта). В течение этого совещания Владелец продукта определяет приоритеты заданий, которые он хотел бы увидеть выполнеными по истечении спринта. Команда оценивает по времени, сколько из желаемого они могут выполнить. В итоге получается список заданий, который не может меняться в течение спринта и к концу спринта должен быть полностью выполнен.")]),n("p",[t._v("Пример работы PR-агентства. Как бы это могло выглядеть, если бы они работали по Scrum.\nКомпания клиент «Икс» хочет провести через 2 месяца масштабное мероприятие для своих партнеров и журналистов. Услуги по организации такого мероприятия компания «Икс» заказала у агентства «Зет». Компанию «Икс» представляет PR-менеджер, который отвечает за организацию мероприятия со стороны клиента. В терминологии Scrum — этот человек называется Владелец продукта. Со стороны агентства за организацию мероприятия отвечает account-менеджер (Scrum-мастер), в подчинении которого находится команда (Scrum-команда). На совместном совещании (планировании спринта) компания и агентство решают, что они будут отчитываться-планировать каждые 2 недели (длина спринта). На первые 2 недели они запланировали список задач (спринт-бэклог), однако команда оценила, что не все из этого списка они успеют выполнить. Тогда PR-менеджер (он же Владелец продукта), говорит какие из этого списка задач более приоритетные на ближайшие 2 недели, после чего команда берется за выполнение заданий. Единственное что здесь должно быть учтено, что на момент планирования первого спринта должен быть спланирован весь список заданий на 2 месяца (product-бэклог), чтобы не получилось так, что к моменту проведения мероприятия что-то не выполнено.")]),n("h3",{attrs:{id:"жизненный-цикл-спринта"}},[n("a",{attrs:{href:"#%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D1%86%D0%B8%D0%BA%D0%BB-%D1%81%D0%BF%D1%80%D0%B8%D0%BD%D1%82%D0%B0","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Жизненный цикл спринта")]),n("ol",[n("li",[n("strong",[t._v("Планирование спринта")]),t._v("\nВ начале каждого спринта проводится планирование спринта. В планировании спринта участвуют заказчики, пользователи, менеджмент, Product Owner, Скрам Мастер и команда.\nПланирование спринта состоит из двух последовательных митингов.")])]),n("p",[n("em",[t._v("Планирование спринта, митинг первый")]),t._v("\nУчастники: команда, Product Owner, Scrum Master, пользователи, менеджемент\nЦель: Определить цель спринта (Sprint Goal) и Sprint Backlog -функциональность, которая будет разработана в течение следующего спринта для достижения цели спринта.\nАртефакт: Sprint Backlog")]),n("p",[n("em",[t._v("Планирование спринта, митинг второй")]),t._v("\nУчастники: Скрам Мастер, команда\nЦель: определить, как именно будет разрабатываться определенная функциональность для того, чтобы достичь цели спринта. Для каждого элемента Sprint Backlog определяется список задач и оценивается их продолжительность.\nАртефакт: в Sprint Backlog появляются задачи\nЕсли в ходе спринта выясняется, что команда не может успеть сделать запланированное на спринт, то Скрам Мастер, Product Owner и команда встречаются и выясняют, как можно сократить scope работ и при этом достичь цели спринта.")]),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[n("strong",[t._v("Остановка спринта (Sprint Abnormal Termination)")]),t._v("\nОстановка спринта производится в исключительных ситуациях. Спринт может быть остановлен до того, как закончатся отведенные 30 дней. Спринт может остановить команда, если понимает, что не может достичь цели спринта в отведенное время. Спринт может остановить Product Owner, если необходимость в достижении цели спринта исчезла.\nПосле остановки спринта проводится митинг с командой, где обсуждаются причины остановки спринта. После этого начинается новый спринт: производится его планирование и стартуются работы.")])]),n("li",[n("p",[n("strong",[t._v("Daily Scrum Meeting")]),t._v("\nЭтот митинг проходит каждое утро в начале дня. Он предназначен для того, чтобы все члены команды знали, кто и чем занимается в проекте. Длительность этого митинга строго ограничена и не должна превышать 15 минут. Цель митинга — поделиться информацией. Он не предназначен для решения проблем в проекте. Все требующие специального обсуждения вопросы должны быть вынесены за пределы митинга.")])])]),n("p",[t._v("Скрам митинг проводит Скрам Мастер. Он по кругу задает вопросы каждому члену команды:")]),n("ul",[n("li",[t._v("Что сделано вчера?")]),n("li",[t._v("Что будет сделано сегодня?")]),n("li",[t._v("С какими проблемами столкнулся?")])]),n("p",[t._v("Скрам Мастер собирает все открытые для обсуждения вопросы в виде Action Items в формате что/кто/когда, например")]),n("ul",[n("li",[t._v("Обсудить проблему с отрисовкой контрола")]),n("li",[t._v("Петя и Вася")]),n("li",[t._v("Сразу после скрама")])]),n("ol",{attrs:{start:"4"}},[n("li",[n("strong",[t._v("Диаграмма сгорания задач (Burndown chart)")])])]),n("p",[n("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/0/05/SampleBurndownChart.png",alt:"Диаграмма сгорания задач (Burndown chart)"}})]),n("p",[t._v("Диаграмма, показывающая количество сделанной и оставшейся работы. Обновляется ежедневно с тем, чтобы в простой форме показать подвижки в работе над спринтом. График должен быть общедоступен.")]),n("p",[t._v("Существуют разные виды диаграммы:")]),n("ul",[n("li",[n("em",[t._v("диаграмма сгорания работ для спринта")]),t._v(" — показывает, сколько уже задач сделано и сколько ещё остаётся сделать в текущем спринте.")]),n("li",[n("em",[t._v("диаграмма сгорания работ для выпуска проекта")]),t._v(" — показывает, сколько уже задач сделано и сколько ещё остаётся сделать до выпуска продукта (обычно строится на базе нескольких спринтов).")])]),n("ol",{attrs:{start:"5"}},[n("li",[n("strong",[t._v("Ретроспектива")]),t._v("\nВ конце каждого Спринта, Скрам Команда собирается на Ретроспективу. Цель Ретроспективы пересмотреть качество существующих процессов, взаимоотношения людей и применяемые инструменты. Команда определяет, что прошло хорошо, а что не очень, а также выявляет потенциальные возможности для улучшений. Они создают план улучшений на будущее.")])]),n("h2",{attrs:{id:"kanban-канбан"}},[n("a",{attrs:{href:"#kanban-%D0%BA%D0%B0%D0%BD%D0%B1%D0%B0%D0%BD","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Kanban (Канбан)")]),n("p",[t._v("Является одной из методологий Agile. Метод базируется на концепции бережливого производства, основанной на стремлении к устранению всех потерь — временных, производственных, логистических, качественных.")]),n("p",[t._v("Особенность Kanban"),n("sup",{attrs:{id:"fnref-2"}},[n("a",{staticClass:"footnote-ref",attrs:{href:"#fn-2"}},[t._v("2")])]),t._v(" — задачи должны выполняться точно в срок, нагрузка между командой распределяется равномерно.")]),n("p",[t._v("На практике это выглядит следующим образом. Каждая задача по проекту описывается в отдельной карточке и добавляется на доску — виртуальную или настоящую. Карточка и доска — неотъемлемые элементы Kanban. ")]),n("p",[n("img",{attrs:{src:"https://leonardo.osnova.io/48b8b2fb-95eb-fbf4-f30b-1a1f1620f54d/-/preview/2100/-/format/webp/",alt:"Kanban (Канбан)"}})]),n("p",[t._v("Все задачи, которые необходимо сделать, собраны в специальной колонке, условно, она может называться "),n("strong",[t._v("“сделать”/ “to do”")]),t._v(". Исполнитель выбирает задачу и перемещает в колонку "),n("strong",[t._v("“в процессе” / “in progress”")]),t._v(". Когда задача сделана, она попадает в соответствующую колонку "),n("strong",[t._v("“готово” / “done”")]),t._v(".")]),n("p",[t._v("На практике колонок может быть гораздо больше, чем три. К примеру, колонки на доске могут выглядеть так: “обсуждается” (backlog), “согласовано” (ready), “кодируется” (coding), “тестируется” (testing), “подтверждается” (approval) и “сделано” (done).")]),n("blockquote",[n("p",[t._v("Кейс “Тойота”. Методология Kanban родилась на производстве в компании Toyota. Мастера участков перечисляли выполняемые работы на бумаге и вывешивали их на видном месте — так и родилась доска канбан, один из элементов методологии. В основе производства Toyota — годовой план производства и сбыта авто, на базе которого составляются месячные и оперативные планы среднесуточного выпуска на каждом участке, основывающиеся на прогнозировании покупательского спроса. Методология базируется на принципе “точно в срок”, что, помимо четкого следования таймингу по каждой задаче, позволяет раскрывать дефекты производства вовремя. Например, ежедневные контроль запасов продукции и деталей выявляет неисправности или простои.")])]),n("p",[t._v("Канбан — это даже еще более «гибкая» методология, чем SCRUM и XP. Это значит, что она не подойдет всем командам и для всех проектов. И это также значит, что команда должна быть еще более готовой к гибкой работе, чем даже команды, использующие SCRUM и XP.")]),n("h3",{attrs:{id:"разница-между-канбан-и-scrum"}},[n("a",{attrs:{href:"#%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-%D0%BA%D0%B0%D0%BD%D0%B1%D0%B0%D0%BD-%D0%B8-scrum","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Разница между Канбан и SCRUM")]),n("ul",[n("li",[t._v("В Канбан нет таймбоксов ни на что (ни на задачи, ни на спринты)")]),n("li",[t._v("В Канбан задачи больше и их меньше")]),n("li",[t._v("В Канбан оценки сроков на задачу опциональные или вообще их нет")]),n("li",[t._v("В Канбан «скорость работы команды» отсутствует и считается только среднее время на полную реализацию задачи")])]),n("p",[t._v("Канбан разработка отличается от SCRUM в первую очередь ориентацией на задачи. Если в SCRUM основная ориентация команды — это успешное выполнение спринтов (надо признать, что это так), то в Канбан на первом месте задачи.\nСпринтов никаких нет, команда работает над задачей с самого начала и до завершения. Деплоймент задачи делается тогда, когда она готова. Презентация выполненной работы — тоже. Команда не должна оценивать время на выполнение задачи, ибо это имеет мало смысла и почти всегда ошибочно вначале.\nЕсли менеджер верит команде, то зачем иметь оценку времени? Задача менеджера — это создать приоритизированный пул задач, а задача команды — выполнить как можно больше задач из этого пула. Всё. Никакого контроля не нужно. Всё, что нужно от менеджера — это добавлять задачи в этот пул или менять им приоритет. Именно так он управляет проектом.")]),n("h2",{attrs:{id:"экстремальное-программирование-xp"}},[n("a",{attrs:{href:"#%D1%8D%D0%BA%D1%81%D1%82%D1%80%D0%B5%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-xp","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Экстремальное программирование (XP)")]),n("p",[n("img",{attrs:{src:"https://leonardo.osnova.io/5a5a58fa-3c54-6d7a-f158-b75c0868b05d/-/preview/2100/-/format/webp/",alt:"Экстремальное программирование (XP)"}})]),n("p",[t._v("eXtreme Programming, экстремальное программирование, XP — гибкая методология разработки, которая появилась в конце 90-х годов прошлого столетия. Авторы взяли лучшие, на их взгляд, практики гибкой разработки и усилили их до максимума — отсюда и слово “экстремальный” в названии.")]),n("p",[t._v("В отличие от канбана, скрама, которые можно применять в самых разных стартапах и бизнесах, да и в организации личных дел, XP применяется исключительно в разработке программных продуктов. В рамках экстремального программирования выделяются четыре процесса: кодирование, тестирование, дизайн, слушание. Если описать эту методологию несколькими словами, то ее характеризуют оперативность, высокое качество, командная работа.")]),n("p",[t._v("Особенностью XP являются некоторые практики, самая известная из которых — парное программирование. Суть его заключается в том, что два разработчика одновременно работают над кодом для одной функции продукта: сначала один пишет, а второй наблюдает и исправляет ошибки, затем они меняются местами. Таким образом, в процессе создания кода есть два альтернативных решения, на каждом этапе выбирается лучшее. Парное программирование работает по принципу: одна голова — хорошо, а две лучшею")]),n("p",[t._v("Другая особенность экстремального программирования заключается в том, что сначала готовятся тесты, и только потом — код. При этом тесты пишут сами программисты. Тестирование позволяет исправить большинство ошибок на стадии создания кода.")]),n("p",[t._v("Третья особенность — коллективное владение кодом: каждый программист в команде имеет доступ к коду продукта и может вносить в него изменения. В том случае, если изменения привели к некорректной работе системы, исправить все должен тот программист, который внес эти изменения.")]),n("p",[t._v("Экстремальное программирование предполагает также работу в рамках небольших релизов — от одного дня до месяца. При этом чем короче релизы, тем лучше качество продукта.")]),n("p",[t._v("Наконец, интеграция новых частей в систему происходит так быстро как это возможно. Как только тесты показали, что функция работает корректно, она интегрируется в систему.")]),n("p",[t._v("Двенадцать основных приёмов экстремального программирования (по первому изданию книги Extreme programming explained) могут быть объединены в четыре группы:")]),n("ul",[n("li",[t._v("Короткий цикл обратной связи (Fine-scale feedback)")]),n("li",[t._v("Разработка через тестирование (Test-driven development)")]),n("li",[t._v("Игра в планирование (Planning game)")]),n("li",[t._v("Заказчик всегда рядом (Whole team, Onsite customer)")]),n("li",[t._v("Парное программирование (Pair programming)")]),n("li",[t._v("Непрерывный, а не пакетный процесс")]),n("li",[t._v("Непрерывная интеграция (Continuous integration)")]),n("li",[t._v("Рефакторинг (Design improvement, Refactoring)")]),n("li",[t._v("Частые небольшие релизы (Small releases)")]),n("li",[t._v("Понимание, разделяемое всеми")]),n("li",[t._v("Простота (Simple design)")]),n("li",[t._v("Метафора системы (System metaphor)")]),n("li",[t._v("Коллективное владение кодом (Collective code ownership) или выбранными шаблонами проектирования (Collective patterns ownership)")]),n("li",[t._v("Стандарт кодирования (Coding standard or Coding conventions)")]),n("li",[t._v("Социальная защищенность программиста (Programmer welfare):")]),n("li",[t._v("40-часовая рабочая неделя (Sustainable pace, Forty-hour week)")])]),n("h2",{attrs:{id:"dsdm-dynamic-systems-development-model"}},[n("a",{attrs:{href:"#dsdm-dynamic-systems-development-model","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("DSDM (Dynamic Systems Development Model)")]),n("p",[t._v("Методология, которая демонстрирует набор принципов, предопределенных типов ролей и техник.")]),n("p",[t._v("Принципы направлены на главную цель  - сдать готовый проект вовремя и уложиться в бюджет, с возможностью регулировать требования во время разработки. DSDM входит в семейство гибкой методологии разработки программного обеспечения, а также разработок не входящих в сферу информационных технологий.")]),n("h2",{attrs:{id:"rational-unified-process-rup"}},[n("a",{attrs:{href:"#rational-unified-process-rup","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("RATIONAL UNIFIED PROCESS (RUP)")]),n("p",[t._v("Это методология разработки программного обеспечения, созданная компанией Rational Software.")]),n("p",[n("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/1/19/Development-iterative.png"}})]),n("h3",{attrs:{id:"основные-принципы"}},[n("a",{attrs:{href:"#%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%BD%D1%8B%D0%B5-%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Основные принципы")]),n("ul",[n("li",[t._v("компонентная архитектура, реализуемая и тестируемая на ранних стадиях проекта;")]),n("li",[t._v("работа над проектом в сплочённой команде, ключевая роль в которой принадлежит архитекторам;")]),n("li",[t._v("ранняя идентификация и непрерывное устранение возможных рисков;")]),n("li",[t._v("концентрация на выполнении требований заказчиков к исполняемой программе;")]),n("li",[t._v("ожидание изменений в требованиях, проектных решениях и реализации в процессе разработки;")]),n("li",[t._v("постоянное обеспечение качества на всех этапах разработки проекта.")])]),n("p",[t._v("Разработка продукта при данном методе состоит из четырех фаз (начальная стадия, уточнение, построение, внедрение), каждая из которых включает в себя одну или несколько итераций. RUP огромная методология, которую трудно уложить в абзац текста, но методы, рекомендуемые RUP основаны на статистике коммерчески успешных проектов. ")]),n("h2",{attrs:{id:"microsoft-solutions-framework"}},[n("a",{attrs:{href:"#microsoft-solutions-framework","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("MICROSOFT SOLUTIONS FRAMEWORK")]),n("p",[t._v("Методология разработки программного обеспечения, предложенная корпорацией Microsoft. MSF опирается на практический опыт Microsoft и описывает управление людьми и рабочими процессами в процессе разработки решения.")]),n("p",[n("img",{attrs:{src:"https://sbsoft.com/wp-content/uploads/2014/12/msf-2.png",alt:"MICROSOFT SOLUTIONS FRAMEWORK"}})]),n("h3",{attrs:{id:"базовые-концепции-и-принципы-модели-процессов-msf"}},[n("a",{attrs:{href:"#%D0%B1%D0%B0%D0%B7%D0%BE%D0%B2%D1%8B%D0%B5-%D0%BA%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D0%B8-%D0%B8-%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8-%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D0%B2-msf","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Базовые концепции и принципы модели процессов MSF")]),n("ul",[n("li",[t._v("единое видение проекта — все заинтересованные лица и просто участники проекта должны чётко представлять конечный результат, всем должна быть понятна цель проекта;")]),n("li",[t._v("управление компромиссами — поиск компромиссов между ресурсами проекта, календарным графиком и реализуемыми возможностями;")]),n("li",[t._v("гибкость — готовность к изменяющимся проектным условиям;")]),n("li",[t._v("концентрация на бизнес-приоритетах — сосредоточенность на той отдаче и выгоде, которую ожидает получить потребитель решения;")]),n("li",[t._v("поощрение свободного общения внутри проекта;")]),n("li",[t._v("создание базовых версии — фиксация состояния любого проектного артефакта, в том числе программного кода, плана проекта, руководства пользователя, настройки серверов и последующее эффективное управление изменениями, аналитика проекта.")])]),n("p",[t._v("MSF предлагает проверенные методики для планирования, проектирования, разработки и внедрения успешных IT-решений. Благодаря своей гибкости, масштабируемости и отсутствию жестких инструкций MSF способен удовлетворить нужды организации или проектной группы любого размера. Методология MSF состоит из принципов, моделей и дисциплин по управлению персоналом, процессами, технологическими элементами и связанными со всеми этими факторами вопросами, характерными для большинства проектов.")]),n("h2",{attrs:{id:"lean-lean-software-development---бережливая-разработка-программного-обеспечения"}},[n("a",{attrs:{href:"#lean-lean-software-development---%D0%B1%D0%B5%D1%80%D0%B5%D0%B6%D0%BB%D0%B8%D0%B2%D0%B0%D1%8F-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),t._v("Lean, Lean Software Development - бережливая разработка программного обеспечения")]),n("p",[n("img",{attrs:{src:"https://leonardo.osnova.io/515471bd-ab0b-1836-4f32-124db73823d7/-/preview/2100/-/format/webp/",alt:"Lean, Lean Software Development - бережливая разработка программного обеспечения"}})]),n("p",[t._v("Гибкая методология, основанная на концепции бережливого производства. Среди принципов методологии — исключение потерь (к ним относится все, что не добавляет ценности для потребителя — излишняя функциональность, паузы в процессе разработки, нечеткие требования и пр.); акцент на обучении (предполагаются короткие циклы разработки, раннее тестирование), принятие решений на основе фактов, мотивация команды.")]),n("p",[t._v("Виды методологий разработки ПО:\n• Каскадная или поэтапная разработка (в некоторых источниках её называют «водопадной моделью») — процесс создания программного обеспечения представляет собой поток, последовательно проходящий фазы анализа, проектирования, реализации, тестирования, интеграции и поддержки. Так обычно строится работа над крупными проектами с длительным сроком внедрения.\n• Итеративная или инкрементная (эволюционная) модель приращения продукта позволяет параллельно выполнять ряд задач с непрерывным анализом результатов и корректировкой предыдущих этапов работы. Это более «скоростная» разработка для большого штата квалифицированных программистов.\n• Спиральная методика характеризуется прохождением проектом повторяющегося цикла в каждой фазе развития: планирование — реализация — проверка — оценка (англ. plan-do-check-act cycle). Так обычно создаются проекты, с окончательно не сформированным видением результата, либо требующие ультрасрочного внедрения по этапам.\n• Гибкая методология Agile-разработки — т.н. быстрая разработка без ущерба качеству, когда во главу угла ставится работающий продукт, а не его документация. Наиболее современный неформализованный подход к созданию ПО, в процессе которого реагирование на изменения ценятся выше строгого следования плану. Для молодых стремительно развивающихся проектов, которые с каждой итерацией программного обеспечения по сути готовы к его релизу.")]),n("div",{staticClass:"footnotes"},[n("hr"),n("ol",[n("li",{attrs:{id:"fn-1"}},[t._v("Scrum (Скрам) — это не аббревиатура, этот термин взят из регби, который обозначает схватку вокруг мяча."),n("a",{staticClass:"footnote-backref",attrs:{href:"#fnref-1"}},[t._v("↩")])]),n("li",{attrs:{id:"fn-2"}},[t._v("Термин Канбан имеет дословный перевод: «Кан» значит видимый, визуальный, и «бан» значит карточка или доска."),n("a",{staticClass:"footnote-backref",attrs:{href:"#fnref-2"}},[t._v("↩")])])])])])}),[],!1,null,null,null);"function"==typeof D&&D(v),"function"==typeof B&&B(v);n.default=v.exports}}]);