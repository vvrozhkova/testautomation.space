{"hash":"0213eba03430e5b0e3c2cc7a74590e7a25387fd6","data":{"post":{"title":"Словари и сортировка подсчётом","content":"\n## Сортировка подсчетом\n\nПусть необходимо отсортировать массив из N целых чисел каждое от 0 до K. \n\nОбычная сортировка займет $O(N logN)$.\n\nБудем считать количество вхождений каждого числа а затем выводить каждое число столько раз сколько оно встречалось. Это займет $O(N+K)$ и $O(K)$ дополнительной памяти.\n\nИнтервал значений можно сдвинуть, чтобы он был не от 0 до K, а от минимального до максимального значения в массиве.\n\nРешение\n\nСоздаем массив и заполняем его нулями. Каждому числу соответсвует ячейка соответствующего индекса в массиве. \nКогда встречаем число увеличиваем счетчик в соответсвуюзей ячейке на единицу. \n\nЗатем идем по всем допустимым значениям и выводим число столько раз сколько оно встречалось.\n\n```java\npublic static void countSort(int[] arr) {\n    int max = Arrays.stream(arr).max().getAsInt();\n    int min = Arrays.stream(arr).min().getAsInt();\n\n    int k = max - min + 1;\n    int[] array = new int[k];\n    Arrays.fill(array, 0);\n\n    for (int i = 0; i < arr.length; i++) {\n        array[arr[i]] +=1;\n    }\n\n    int nowPos = 0;\n    for (int i = 0; i < array.length; i++) {\n        for (int j = 0; j < array[i]; j++) {\n            arr[nowPos] = i;\n            nowPos+=1;\n        }\n    }\n}\n```\n\n### Задача 1\n\nДано два числа X и Y без ведущих нулей. Необходимо проверить, можно ли получить первое из второго перестановкой цифр.\n\nПосчитаем количество вхождений каждой цифры в каждое из чисел и сравним. Цифры будем постепенно добывать из числа справа с помощью %10 и /10.\n\nРазложим цифры в массивы по аналогии с сортировкой подсчетом и сравним их. \n\nСортировка подсчетом уместна когда разница между максимальным и минимальным небольшая.\n\n\n## Словари\n\nСловарь - он как множество но к каждому ключу приписано значение\n\nИскать по значению в словаре нельзя\n\nКонстанта в сложности словарей заметно больше чем у массивов поэтому где можно - лучше использовать сортировку подсчетом.\n\nСортировку подсчетом использовать неразумно если данные разреженные.\n\n### Задача 1\n\nНа шахматной доске N x N находится M ладей (ладья бьет клетки на той же горизонтали и вертикали до ближайшей занятой) \nОпределите сколько пар ладей бьют друг друга. Ладьи задаются парой чисел I и J, обозначающих координаты клетки.\n\n$1<= N <= 10^9, 0<=M<=2*10^5$.\n\nРешение\n\nДля каждой занятой горизонтали и вертикали будем хранить количество ладей на них. Количество пар в горизонтали (вертикали) равно количество ладей минус 1. Суммируем это количество пар для всех горизонталей и вертикалей.\n\n\n## Задел под оптимизацию\n\n","description":"Словари и сортировка подсчётом","image":"null","category":null,"date":"25/07/2022","path":"/slovari-i-sortirovka-podschyotom/","links":[{"title":"","items":[{"title":"Алгоритмы (курс Яндекс)","link":"/algoritmy-kurs-yandeks/"},{"title":"Сложность, тестирование, особые случаи","link":"/slozhnost-testirovanie-osobye-sluchai/"},{"title":"Линейный поиск","link":"/linejnyj-poisk/"},{"title":"Множества","link":"/mnozhestva/"},{"title":"Словари и сортировка подсчётом","link":"/slovari-i-sortirovka-podschyotom/"},{"title":"Префиксные суммы и два указателя","link":"/prefiksnye-summy-i-dva-ukazatelya/"},{"title":"Бинарный поиск","link":"/binarnyj-poisk/"},{"title":"Сортировка событий","link":"/sortirovka-sobytij/"},{"title":"Деревья","link":"/derevya/"}]}],"headings":[{"value":"Сортировка подсчетом","anchor":"#сортировка-подсчетом"},{"value":"Словари","anchor":"#словари"},{"value":"Задел под оптимизацию","anchor":"#задел-под-оптимизацию"}],"subtitles":[{"depth":2,"value":"Сортировка подсчетом","anchor":"#сортировка-подсчетом"},{"depth":3,"value":"Задача 1","anchor":"#задача-1"},{"depth":2,"value":"Словари","anchor":"#словари"},{"depth":3,"value":"Задача 1","anchor":"#задача-1-1"},{"depth":2,"value":"Задел под оптимизацию","anchor":"#задел-под-оптимизацию"}],"tags":[{"id":"algorithms","title":"algorithms","path":"/tag/algorithms/"},{"id":"java","title":"java","path":"/tag/java/"},{"id":"алгоритмы","title":"алгоритмы","path":"/tag/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D1%8B/"}]},"comments":{"edges":[]}},"context":{}}